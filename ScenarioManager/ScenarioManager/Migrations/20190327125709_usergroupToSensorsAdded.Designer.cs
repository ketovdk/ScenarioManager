// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScenarioManager.Model.DBModel.DBContexts;

namespace ScenarioManager.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20190327125709_usergroupToSensorsAdded")]
    partial class usergroupToSensorsAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ScenarioManager.Model.DBModel.Admin", b =>
                {
                    b.Property<string>("Login")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FIO");

                    b.Property<string>("Info");

                    b.Property<bool>("IsMainAdmin");

                    b.HasKey("Login");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("ScenarioManager.Model.DBModel.ControllerScenarios", b =>
                {
                    b.Property<long>("ControllerId");

                    b.Property<long>("ScenarioId");

                    b.Property<bool>("TurnedOn");

                    b.HasKey("ControllerId", "ScenarioId");

                    b.HasIndex("ScenarioId");

                    b.ToTable("ControllerScnarios");
                });

            modelBuilder.Entity("ScenarioManager.Model.DBModel.Scenario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Publicity");

                    b.Property<string>("Script")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.Property<long>("UserGroupId");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.ToTable("Scenarios");
                });

            modelBuilder.Entity("ScenarioManager.Model.DBModel.Sensor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ControllerId");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.Property<long>("UserGroupId");

                    b.HasKey("Id");

                    b.HasIndex("ControllerId");

                    b.HasIndex("UserGroupId")
                        .IsUnique();

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("ScenarioManager.Model.DBModel.SmartController", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adress");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.Property<long>("UserGroupId");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.ToTable("Controllers");
                });

            modelBuilder.Entity("ScenarioManager.Model.DBModel.SmartThing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ControllerId");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.Property<long>("UserGroupId");

                    b.HasKey("Id");

                    b.HasIndex("ControllerId");

                    b.HasIndex("UserGroupId")
                        .IsUnique();

                    b.ToTable("SmartThings");
                });

            modelBuilder.Entity("ScenarioManager.Model.DBModel.TokenGuid", b =>
                {
                    b.Property<string>("Login")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("Guid");

                    b.HasKey("Login");

                    b.ToTable("TokenGuids");
                });

            modelBuilder.Entity("ScenarioManager.Model.DBModel.User", b =>
                {
                    b.Property<string>("Login")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FIO");

                    b.Property<string>("Info");

                    b.Property<long>("UserGroupId");

                    b.Property<int>("UserType");

                    b.HasKey("Login");

                    b.HasIndex("UserGroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ScenarioManager.Model.DBModel.UserGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long?>("ParentGroupId");

                    b.HasKey("Id");

                    b.HasIndex("ParentGroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("ScenarioManager.Model.DBModel.UserLoginInfo", b =>
                {
                    b.Property<string>("Login")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HashedPassword");

                    b.Property<string>("Role");

                    b.Property<byte[]>("Salt");

                    b.HasKey("Login");

                    b.ToTable("UserLoginInfos");
                });

            modelBuilder.Entity("ScenarioManager.Model.DBModel.ControllerScenarios", b =>
                {
                    b.HasOne("ScenarioManager.Model.DBModel.SmartController", "Controller")
                        .WithMany()
                        .HasForeignKey("ControllerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ScenarioManager.Model.DBModel.Scenario", "Scenario")
                        .WithMany()
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ScenarioManager.Model.DBModel.Scenario", b =>
                {
                    b.HasOne("ScenarioManager.Model.DBModel.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ScenarioManager.Model.DBModel.Sensor", b =>
                {
                    b.HasOne("ScenarioManager.Model.DBModel.SmartController", "Controller")
                        .WithMany()
                        .HasForeignKey("ControllerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ScenarioManager.Model.DBModel.UserGroup", "UserGroup")
                        .WithOne()
                        .HasForeignKey("ScenarioManager.Model.DBModel.Sensor", "UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ScenarioManager.Model.DBModel.SmartController", b =>
                {
                    b.HasOne("ScenarioManager.Model.DBModel.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ScenarioManager.Model.DBModel.SmartThing", b =>
                {
                    b.HasOne("ScenarioManager.Model.DBModel.SmartController", "Controller")
                        .WithMany()
                        .HasForeignKey("ControllerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ScenarioManager.Model.DBModel.UserGroup", "UserGroup")
                        .WithOne()
                        .HasForeignKey("ScenarioManager.Model.DBModel.SmartThing", "UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ScenarioManager.Model.DBModel.User", b =>
                {
                    b.HasOne("ScenarioManager.Model.DBModel.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ScenarioManager.Model.DBModel.UserGroup", b =>
                {
                    b.HasOne("ScenarioManager.Model.DBModel.UserGroup", "ParentGroup")
                        .WithMany("ChildrenGroups")
                        .HasForeignKey("ParentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
